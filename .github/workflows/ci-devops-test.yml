name: ci-devops-test

on:
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME_UNDERSCORE: DEVOPS-TEST

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Stable Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          #toolchain: stabless
          toolchain: stable
          override: true
      - name: Cargo Check 
        uses: actions-rs/cargo@v1
        with:
          command: check
      - name: Adding Rust Component
        run: rustup component add rustfmt
      - name: Rust Format check 
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Install Clippy Component
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true

      - name: Clipy Check
        uses: actions-rs/clippy-check@v1
        if: ${{ success() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
          name: Clippy Output

      - name: Nightly Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}

      - name: Install Cargo2Junit        
        run: |
          cargo install cargo2junit;
          
      - name: Cargo Build
        run: cargo build --release

      - name: Unit Test        
        run: |
          cargo test -- -Z unstable-options --format json | cargo2junit > results.xml;

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: results.xml

      - name: Create Artifact Path
        run: mkdir -p target/release
        if: ${{ success() }}

      - name: 'Upload Artifact'
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME_UNDERSCORE }}
          #path: target/release/${{ env.PROJECT_NAME_UNDERSCORE }}
          path: target/release/*

      - run: cargo publish --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
